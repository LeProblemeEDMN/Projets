#version 400 core

in vec3 position;
in vec2 textureCoords;
in vec3 normal;
in vec3 tangent;

out vec2 tCoords;
out vec3 toCameraVector;
out float visibility;
out vec3 toPointVector[5];
out vec3 worldPos;
out vec3 eyePos;
out vec3 vecFrag;
out mat3 toTangentSpace;

uniform mat4 transformationMatrix;
uniform mat4 projectionMatrix;
uniform mat4 viewMatrix;
uniform mat4 invViewMatrix;



uniform float useFakeLightning;

uniform float density;
uniform float shadowDistance;
uniform float gradient;
const float transitionDistance=10.0;

void main(void){
	tCoords=textureCoords;

	
	vec4 worldPosition=transformationMatrix*vec4(position,1.0);
	worldPos=worldPosition.xyz;
	vec4 positionRelativToCamera=viewMatrix*worldPosition;
	eyePos=positionRelativToCamera.xyz;
	mat4 modelViewMatrix = viewMatrix * transformationMatrix;
	gl_Position =projectionMatrix* positionRelativToCamera;
	
	vec3 actualNormal=normal;
	if(useFakeLightning>0.5){
		actualNormal=vec3(0.0,1.0,0.0);
	}
	vec3 surfaceNormal=(modelViewMatrix*vec4(actualNormal,0.0)).xyz;
	surfaceNormal=normalize(surfaceNormal);
	
	vec3 norm = normalize(surfaceNormal);
	vec3 tang = normalize((modelViewMatrix * vec4(tangent, 0.0)).xyz);
	vec3 bitang = normalize(cross(norm, tang));
	
	toTangentSpace = mat3(
		tang.x, bitang.x, norm.x,
		tang.y, bitang.y, norm.y,
		tang.z, bitang.z, norm.z
	);

	toCameraVector=toTangentSpace*(-positionRelativToCamera.xyz);;
	
	float distance=length(positionRelativToCamera.xyz);
	
	visibility=exp(-pow((distance*density),gradient));
	visibility=clamp(visibility,0.0,1.0);
}