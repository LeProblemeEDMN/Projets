#version 400 core

in vec3 position;
in vec2 textureCoords;
in vec3 normal;

out vec2 tCoords;
out vec3 surfaceNormal;
out vec3 toCameraVector;
out float visibility;
out vec3 toPointVector[5];
out vec3 worldPos;
out vec3 reflectedVector;
out vec3 refractedVector;

uniform mat4 transformationMatrix;
uniform mat4 projectionMatrix;
uniform mat4 viewMatrix;
uniform mat4 invViewMatrix;



uniform vec3[10] positionPoint;



uniform float[5] pointInUseVertex;
uniform float useFakeLightning;

uniform float density;
uniform float shadowDistance;
uniform float gradient;
const float transitionDistance=10.0;

void main(void){
	tCoords=textureCoords;
	
	vec4 worldPosition=transformationMatrix*vec4(position,1.0);
	worldPos=worldPosition.xyz;
	vec4 positionRelativToCamera=viewMatrix*worldPosition;
	gl_Position =projectionMatrix* positionRelativToCamera;
	
	vec3 actualNormal=normal;
	if(useFakeLightning>0.5){
		actualNormal=vec3(0.0,1.0,0.0);
	}
	surfaceNormal=(transformationMatrix*vec4(actualNormal,0.0)).xyz;
	surfaceNormal=normalize(surfaceNormal);
	
	toCameraVector=(invViewMatrix*vec4(0.0,0.0,0.0,1.0)).xyz - worldPosition.xyz;
	
	float distance=length(positionRelativToCamera.xyz);
	visibility=exp(-pow((distance*density),gradient));
	visibility=clamp(visibility,0.0,1.0);

	for(int i=0;i<5;i++){
		int id=int(pointInUseVertex[i]);
		if(i>=0){
			toPointVector[i]=positionPoint[id] -worldPosition.xyz;
		}
	}
}